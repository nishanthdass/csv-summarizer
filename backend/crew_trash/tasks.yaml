retrieve_columns:
  description: >
    - **Goal**: Use `query_bot` to retrieve the column names of the specified `{table_name}`.
    - **Expected Outcome**: A list of column names from `{table_name}`, which will be used to add context to the user’s question if needed.
  expected_output: "A list of column names from the specified table."
  agent: "question_validator"
  tools:
      - database_query_tool

rephrase_and_check_data:
  description: >
    - **Goal**: Rephrase the user’s question `{user_question}` by adding relevant column names, then make an additional call to `query_bot` to check if relevant data exists for the rephrased question.
    - **Dependencies**: Uses column names obtained from `retrieve_columns`.
    - **Steps**: 
      - Use `question_rephraser` to rephrase the question with relevant column names for added context.
      - Call `query_bot` with the rephrased question to see if it can retrieve relevant data.
  context:
    - "retrieve_columns"
  tools:
    - database_query_tool  # Tool to check for relevant data with the rephrased question
  expected_output: >
    "A boolean indicating if relevant data exists for the rephrased question, along with the rephrased question text."
  agent: "question_validator"

answer_and_classify_question:
  description: >
    - **Goal**: Use `query_bot` to attempt answering the rephrased question if relevant data was found.
    - **Classification**: Based on the response, classify the question as follows:
      - **Basic Query**: Answerable with a single SQL query.
      - **Analysis**: Requires multiple queries or more advanced processing.
      - **Summarization**: Involves summarizing data subsets.
      - **Invalid**: Unrelated to the table data or unanswerable with the available insights.
  context:
    - "rephrase_and_check_data"
  expected_output: "String with one of the following categories: Basic Query, Analysis, Summarization, Invalid."
  agent: "question_validator"
  tools:
      - database_query_tool


coordinate_task:
  description: >
    - **Goal Alignment**: Generate a task plan that defines task allocation for agents to answer the user's question `{user_question}` relating to the `{table_name}` table. add supporting information such as column names and row numbers.
    - **Use Validation Response**: Use the response from the `answer_and_classify_question` to determine the order of agents to be assigned.
    - **Task Allocation Logic**:
      - **If "Basic Query"**: Assign the `query_generation_agent` without assigning the `analytics_agent`. Then use `summarization_agent` and `answer_evaluation_agent'.
      - **If "Analysis"**: The `task_coordinator` should:
          1. Assign the `analytics_agent` to determine the specific data requirements needed for the analysis.
          2. Assign the `query_generation_agent` to retrieve the relevant data based on these requirements.
          3. Reassign the `analytics_agent` to analyze the retrieved data.
          4. Assign the `summarization_agent` to summarize the analysis results.
          5. Assign the `answer_evaluation_agent` to evaluate the final answer. If the answer is not acceptable, reassign the `analytics_agent` to analyze the data again. Otherwise, return the final answer.
      - **If "Summarization"**: Assign the `summarization_agent`. Use `analytics_agent` or `query_generation_agent` if needed.
      - **If "Invalid"**: Return an error message to the user.
    - **Essential Agents**: It is essential to use both `summarization_agent` and `answer_evaluation_agent` for all tasks unless the task is "invalid".
    - **Flow Specification**: Specify the flow from one agent to another, skipping unnecessary agents or returning to the same agent if needed.
  agent: "task_coordinator"
  expected_output: >
    Ordered array where the first value is the result from `question_validator` and the second value is a list consisting of dictionaries where the key is the name of the agent and the value is the task. These dictionaries should be in the order of execution. Use double quotes around agent names and task instructions.
  context:
    - "answer_and_classify_question"


query_data:
  description: >
    Generates and executes an SQL query based on the task plan {user_task} provided by task_coordinator. Use the columns and values from the {table_name} table for queries and ensure that you are accounting for typos and alternative capitalization
  agent: "query_generation_agent"
  expected_output: "Dictionary with key 'query' and value as SQL query and 'result' with value as query result."

analyze_data:
  description: >
    Analyzes data based on task instructions from task_coordinator and provides insights into trends, pricing, or predictions.
  agent: "analytics_agent"
  expected_output: "Detailed analysis results based on data."

summarize_data:
  description: >
    Summarizes the analysis results according to the task plan received from task_coordinator.
  agent: "summarization_agent"
  expected_output: "Concise summary of the analysis results."

evaluate_answer:
  description: >
    Evaluates the final answer for completeness and accuracy as directed by task_coordinator.
  agent: "answer_evaluation_agent"
  expected_output: "Feedback on response quality."
