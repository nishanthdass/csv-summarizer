summarize_unordered_json:
  description: >
    Use the `JSONSearchTool` with `{key_to_list_json}`
    - Summarize the data, identifying data types, general purposes, and commonalities across columns without referencing specific values.
    - Focus on descriptive terms such as "frequent," "common," "often," and "typically," avoiding specific examples or numbers.
    - Insights should be based on general characteristics and disregard the order of values within arrays.
  expected_output: >
    A Python dictionary containing generalized summaries for each column. Each key should represent a table column and contain:
    - "summary": A concise, generalized summary of the column's data.
    - "insights": Optional additional generalized insights about common patterns.
    - Make sure to use double quotes around all keys and values.
  agent: json_summarizer

summarize_ordered_json:
  description: >
    Using `JSONSearchTool` with `{index_to_row_json}` as input, build on the generalized summaries from `summarize_unordered_json`.
    - Generate high-level insights by examining relationships, dependencies, and correlations between columns, emphasizing general patterns and structural observations.
    - Each key in {index_to_row_json} represents a row with sub-keys as column names and values.
    - Focus on identifying patterns, dependencies, or correlations without referencing specific values.
    - Use terms like "generally," "often," and "typically" to describe relationships while avoiding unique data points.
  expected_output: >
    A Python dictionary containing enhanced, generalized summaries for each column. Each key should represent a table column and contain:
    - "summary": A high-level summary of the column data without specific values.
    - "insights": High-level insights on column relationships and patterns.
    - Make sure to use double quotes around all keys and values.
  agent: json_summarizer

insert_summaries:
  description: >
    First, use `JSON Conversion Tool` to convert the dictionary from `summarize_ordered_json` into a string.
    Second, use the `NL2SQLTool` to insert the JSON-formatted string output from the `JSON Conversion Tool` into the first row of the 'results' column in the `{summary_table_name}` table.
    Be aware that the `NL2SQLTool` requires an input with following key to run successfully:
        - `sql_query`: A string representing the SQL query to be executed.
  expected_output: >
    Confirmation message indicating that both steps were successful data insertion or an detailed error message.
  agent: database_admin

respond_results:
  description: >
    Collect the expected_output from `insert_summaries` and respond to the user with a JSON object containing the status and message.
  expected_output: >
    Use the below JSON structure as a example if the task is completed successfully:
    - "status": "success"
    - "message": "Task completed successfully."
    - "flow of execution": Provide a summary of each step taken by crew in the task execution.
    Use the below JSON structure as a example if the task is not completed successfully:
    - "status": "error"
    - "message": "Task failed to complete successfully."
    - "flow of execution": Provide a summary of each step taken by crew in the task execution.
  agent: result_responder
